% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cite_packages.R
\name{cite_packages}
\alias{cite_packages}
\title{Cite R packages used in a project}
\usage{
cite_packages(
  output = c("file", "paragraph", "table", "citekeys"),
  out.format = "html",
  citation.style = NULL,
  pkgs = "All",
  cite.tidyverse = FALSE,
  dependencies = FALSE,
  include.RStudio = FALSE,
  out.dir = getwd(),
  bib.file = "grateful-refs.bib",
  Rmd.file = "grateful-report.Rmd",
  out.name = "grateful-citations",
  ...
)
}
\arguments{
\item{output}{Either "file" to generate a separate document with formatted citations
for all packages; "paragraph" to return a paragraph with in-text citations of
used packages, suitable to be used within an Rmarkdown document;
"table" to return a table with package name, version, and citations, to be used
in Rmarkdown;
or "citekeys" to return a vector with citation keys.
In all cases, a BibTeX file with package references is saved on disk
(see \code{bib.file}).}

\item{out.format}{Output format when \code{output = "file"}:
either "html" (the default), docx" (Word), "pdf", or "md" (markdown).
(Note that choosing "pdf" requires a working installation of LaTeX).}

\item{citation.style}{Optional. Citation style to format references for a
particular journal. See \url{https://bookdown.org/yihui/rmarkdown-cookbook/bibliography.html}.}

\item{pkgs}{Character. Either "All" to include all packages used in scripts within
the project/folder (the default), or "Session" to include only packages
used in the current session.
\code{pkgs} can also be a character vector of package names to get citations for
(see examples).}

\item{cite.tidyverse}{Logical. If \code{TRUE}, all tidyverse packages (dplyr, ggplot2, etc)
will be collapsed into a single citation of the 'tidyverse'.}

\item{dependencies}{Logical. Include the dependencies of your used packages?
If \code{TRUE}, will include all the packages that your used packages depend on.}

\item{include.RStudio}{Logical. If \code{TRUE}, adds a citation for the
current version of RStudio.}

\item{out.dir}{Directory to save the output document and a BibTeX file with
the references. Default is the working directory.}

\item{bib.file}{Desired name for the BibTeX file containing packages references
("grateful-refs.bib" by default).}

\item{Rmd.file}{Desired name of the Rmarkdown document to be created if
\code{output = "file"}. Default is "grateful-report.Rmd".}

\item{out.name}{Desired name of the output file containing the formatted
references ("grateful-citations" by default).}

\item{...}{Other parameters passed to \code{\link[renv]{dependencies}}.}
}
\value{
A file containing package references in BibTeX format, plus
a file with formatted citations, or a table or paragraph with in-text citations
of all packages, suitable to be used within Rmarkdown documents.
}
\description{
Find R packages used in a project, create a BibTeX file of citations,
and generate a document with formatted package references,
or a paragraph citing all packages used to be used directly within
an Rmarkdown document (see examples).
}
\details{
\code{cite_packages} is a wrapper function that collects package names and versions
and saves their citation information in a BibTeX file
(using \code{\link{get_pkgs_info}}).

Then, the function is designed to handle different use cases:

If \code{output = "file"}, \code{cite_packages()} will generate an RMarkdown file
which includes a paragraph with in-text citations of all packages,
as well as a references list.
This document can be knitted to various formats via \code{out.format}.
References can be formatted for a particular journal using \code{citation.style}.
Thus, \code{output = "file"} is best for obtaining a document separate from R,
to just cut and paste citations.

If \code{output = "paragraph"}, \code{cite_packages()} will return
a paragraph with in-text citations of all packages,
suitable to be used directly in an Rmarkdown document (see README).
To do so, include a reference to the generated \code{bib.file}
bibliography file in the YAML header of the Rmarkdown document.

Alternatively, if \code{output = "table"}, \code{cite_packages()} will return
a table with package names, versions, and citations. Thus, if using Rmarkdown,
you can choose between getting a table or a text paragraph citing all packages.

Finally, you can use \code{output = "citekeys"} to obtain a vector of citation keys,
and then call \code{\link{nocite_references}} within an Rmarkdown document
to cite these packages in the reference list without mentioning them in the text.
}
\note{
Before running \code{grateful} you might want to run
\code{\link[funchir]{stale_package_check}} on your scripts to check for unused packages
before citing them.
}
\section{Limitations}{


  Citation keys are not guaranteed to be preserved when regenerated,
  particularly when packages are updated. This instability is not an issue
  when citations are used programmatically, as in the example below. But if
  references are put into the text manually, they may need to be updated
  periodically.
}

\examples{
\dontrun{
#### To build a standalone document for citations
cite_packages()

# Formatting for a particular journal:
cite_packages(citation_style = "peerj")

# Choosing different output format:
cite_packages(out.format = "docx")

# Citing only packages currently loaded
cite_packages(pkgs = "Session")

# Citing only user-provided packages
cite_packages(pkgs = c("lme4", "vegan", "mgcv"))


#### To include citations in an RMarkdown file

# include this in YAML header: bibliography: grateful-refs.bib

# then call cite_packages within a chunk with chunk option results = "asis"
cite_packages(output = "paragraph")


# To include package citations in the reference list of an Rmarkdown document
without citing them in the text, include this in a chunk:
nocite_references(cite_packages(output = "citekeys"))
}
}
